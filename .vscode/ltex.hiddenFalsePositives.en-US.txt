{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q[scale = 1.0]img/penrose_binaries/kerr_horizons_and_ergosphere.svg Schematic representation of important boundaries and regions in a Kerr black hole.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QNotice that the choice of a leading minus sing in Eq.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QBy substituting \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q (using Eq.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and Eq.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) in Eq.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QNotice also that using \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q in Eq.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QSince we would like the energy to be positive infinitely far away from the BH, we must introduce a leading minus sign in Eq.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe law of conservation of 4-momentum applied at point \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q implies that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Contracting Eq.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q[scale = 1.0]img/penrose_binaries/kerr_breakup.svg Schematic representation of a Penrose process.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIn order to satisfy Eq.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QChristodoulou in Ref.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QEnergy levels inside the generalized ergosphere of a MP black hole with \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, corresponding to the point E in Figs.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, on the other hand, exhibits an orbit of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q for a MP binary with mass ratio \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) and separation parameter \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we show the effective energy and the effective potential for a MP spacetime with \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, when the particle's charge-to-mass ratio, angular momentum (per unit mass), and energy (per unit mass) are, respectively, \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QFollowing Penrose's original proposal \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and its extension to RN black holes \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we now investigate the possibility of energy extraction from a MP binary black hole.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QLeft panel: Penrose process in the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q plane of a MP spacetime with \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QRight panel: Penrose process in the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q plane of a MP spacetime with \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QIn other words, the presence of the bound particle fragment reduces the energy required to form a MP binary and the excess energy is transferred to the escaping fragment.\\E$"}
{"rule":"SOME_OF_THE","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q we exhibit examples of Penrose processes that include some of the negative energy orbits shown in Sec.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QThe left panel exhibits a Penrose process that takes place in the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q plane of a MP spacetime with \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QThe right panel, on the other hand, exhibits a Penrose process that occurs in the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q plane of a MP spacetime with \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we have \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q A natural question arises: what is the maximum efficiency of the Penrose process in a MP spacetime?\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QGiven these hypotheses, we will determine how much energy can be extracted from a MP black hole and how the remaining parameters must be chosen in order to optimize the process.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QConsequently, the efficiency of the Penrose process in a MP spacetime is bound from above according to \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QWe now give concrete examples of energy extraction in a MP binary black hole spacetime whose efficiency approaches the theoretical maximum given by Eq.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QExamples of Penrose processes that approach the maximum theoretical efficiency in a MP spacetime.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QTeX Gyre Pagella Math\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QLucas Timotheo Sanches\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QAdvisor: Prof. Dr. Maurício Richartz\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QTIMOTHEO SANCHES, Lucas\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe code consists of a “kernel” integrator using the ARKODE explicit Runge-Kutta integrator \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q with several plugins.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe code consists of a “kernel” integrator using the ARKODE explicit Runge-Kutta integrator with several plugins.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe code consists of a “kernel” integrator using the ARKODE \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q explicit Runge-Kutta integrator with several plugins.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QMotivated by these developments, we have implemented QuasinormalModes.jl (see the acompanying paper in Ref.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q`QuasinormalModes.jl` \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a `Julia` package for computing the quasinormal modes of any General Relativity model whose perturbation equation can be expressed as second order homogeneous ODE.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, which are both excellent packages that aim to perform the same task as QuasinormalModes.jl and can be obtained and modified freely but, unfortunately, require the user to own a license of the proprietary Wolfram Mathematica CAS.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QQuasinormalModes.jl fills the existing gap for free, open source tools that are able to compute discrete eigenvalues (and in particular, quasinormal modes) efficiently for a broad class of models and problems.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QQuasinormalModes.jl.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q[scale = 0.75]img/aim_qnm/aim_coeffs.svg todo\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q[scale = 0.75]img/aim_qnm/aim_coeffs.svg Schematic representation of the AIM for computing the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q matrix.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q[scale = 0.75]img/aim_qnm/aim_coeffs_d.svg Schematic representation of the AIM for computing the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q matrix.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QWe shall call these icda (initial \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q data array) and idda (initial \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q data array).\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QWe shall call these ccda (current \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q data array) and cdda (current \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q data array)\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QWe shall call these pcda (previous \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q data array) and pdda (previous \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q data array).\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QInitialize ccda with data from icda and cdda with data from idda.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThat is, repeat the following \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q times: Copy the content from ccda into pcda Copy the content from cdda into pdda Rewrite each element of ccda and cdda using Eqs.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QExplicitly, perform cdda[1]*pcda[1] - pdda[1]*ccda[1].\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q[scale = 1.0]img/aim_qnm/arrays.svg TODO\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThis implementation is realized in the Julia \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q package called QuasinormalModes.jl \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q[scale = 1.0]img/aim_qnm/arrays.svg Representation of AIM steps for a \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q sized example.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q[scale = 1.0]img/aim_qnm/arrays.svg Representation of AIM steps for an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q sized example.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QWe will now describe basic usage of QuasinormalModes.jl.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q[scale = 1.0]img/aim_qnm/hierarchy.svg QuasinormalModes.jl type hierarchy.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QAIMProblem is the parent type of all problems that can be solved with this package.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QNumericAIMProblem is the parent type of all problems that can be solved using a numeric approach.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QAnalyticAIMProlem is the parent type of all problems that can be solved using a semi-analytic approach.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QQuadraticEigenvaluePoblem is a specific type of analytic problem whose eigenvalues appear in the ODE as a (possibly incomplete) quadratic polynomial.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIt's thus useful to start by inspecting the package's exported type hierarchy AIMProblem is the parent type of all problems that can be solved with this package.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q[scale = 0.91]img/aim_qnm/hierarchy.svg QuasinormalModes.jl type hierarchy.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QCurrently, there is only one defined trait, called AnalyticityTrait.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThis trait can have two possible \"values\": IsAnalytic and IsNumeric, that are represented by concrete types.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe default trait of an AIMProblem is IsNumeric, while any sub-type of AnalyticAIMProblem has the IsAnalytic and NumericAIMProblem have the IsNumeric trait.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe default trait of an AIMProblem is IsNumeric, while any subtype of AnalyticAIMProblem has the IsAnalytic and NumericAIMProblem have the IsNumeric trait.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qgetniter: Return the number of iterations that the AIM will perform.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qgetx0: Return the expansion point of the AIM.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QFor problems with the IsAnalytic trait, the user must implement the following functions: getODEvar which returns an object that represents the ODE's variable.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QgetODEeigen which returns an object that represents the ODE's eigenvalue.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QIf a problem type PN,T is a subtype of AnalyticAIMProblemN,T, the user must extend the default implementations abiding by the following rules QuasinormalModes.λ0(p::PN,T) where N,T must return a SymEngine.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIf a problem type PN,T is a subtype of AnalyticAIMProblemN,T, the user must extend the default implementations abiding by the following rules QuasinormalModes.λ0(p::PN,T) where N,T must return a SymEngine.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QIf a problem type PN,T is a subtype of AnalyticAIMProblemN,T, the user must extend the default implementations abiding by the following rules QuasinormalModes.λ0(p::PN,T) where N,T must return a SymEngine.\\E$"}
{"rule":"SENTENCE_WHITESPACE","sentence":"^\\QBasic object representing the symbolic expression for the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q part of the ODE.\\E$"}
{"rule":"SENTENCE_WHITESPACE","sentence":"^\\QS0(p::PN,T) where N,T must return a SymEngine.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QS0(p::PN,T) where N,T must return a SymEngine.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QS0(p::PN,T) where N,T must return a SymEngine.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QQuasinormalModes.getODEvar(p::PN,T) where N,T must return a SymEngine.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QQuasinormalModes.getODEvar(p::PN,T) where N,T must return a SymEngine.\\E$"}
{"rule":"SENTENCE_WHITESPACE","sentence":"^\\QBasic objects representing the SymEngine variable associated with the ODE's variable.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QBasic objects representing the SymEngine variable associated with the ODE's variable.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QQuasinormalModes.getODEeigen(p::PN,T) where N,T must return a SymEngine.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QQuasinormalModes.getODEeigen(p::PN,T) where N,T must return a SymEngine.\\E$"}
{"rule":"SENTENCE_WHITESPACE","sentence":"^\\QBasic objects representing the SymEngine variable associated with the ODE's eigenvalue.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QBasic objects representing the SymEngine variable associated with the ODE's eigenvalue.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QIf a problem type PN,T is a subtype of NumericAIMProblemN,T, the user must extend the default implementations abiding by the following rules QuasinormalModes.λ0(p::PN,T) where N,T must return a lambda function of two parameters, the first representing the ODE's variable and the second representing the ODE's eigenvalue where the body represents the expression for the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q part of the ODE.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIf a problem type PN,T is a subtype of NumericAIMProblemN,T, the user must extend the default implementations abiding by the following rules QuasinormalModes.λ0(p::PN,T) where N,T must return a lambda function of two parameters, the first representing the ODE's variable and the second representing the ODE's eigenvalue where the body represents the expression for the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q part of the ODE.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QIf a problem type PN,T is a subtype of NumericAIMProblemN,T, the user must extend the default implementations abiding by the following rules QuasinormalModes.λ0(p::PN,T) where N,T must return a lambda function of two parameters, the first representing the ODE's variable and the second representing the ODE's eigenvalue where the body represents the expression for the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q part of the ODE.\\E$"}
{"rule":"SENTENCE_WHITESPACE","sentence":"^\\QS0(p::PN,T) where N,T must return a lambda function of two parameters, the first representing the ODE's variable and the second representing the ODE's eigenvalue where the body represents the expression for the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q part of the ODE.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QS0(p::PN,T) where N,T must return a lambda function of two parameters, the first representing the ODE's variable and the second representing the ODE's eigenvalue where the body represents the expression for the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q part of the ODE.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QAll problems PN,T that are a subtype of AIMProblemN,T must extend the default implementations abiding by the following rules QuasinormalModes.getniter(p::PN,T) where N,T must return an unsigned number of type N representing the number of iterations for the AIM to perform.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QAll problems PN,T that are a subtype of AIMProblemN,T must extend the default implementations abiding by the following rules QuasinormalModes.getniter(p::PN,T) where N,T must return an unsigned number of type N representing the number of iterations for the AIM to perform.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QAll problems PN,T that are a subtype of AIMProblemN,T must extend the default implementations abiding by the following rules QuasinormalModes.getniter(p::PN,T) where N,T must return an unsigned number of type N representing the number of iterations for the AIM to perform.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QQuasinormalModes.getx0(p::PN,T) where N,T must return a number of type T representing the evaluation point of the AIM.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QBecause of the semi-analytic nature of the operation performed when a structure is a subtype of AnalyticAIMProblem, QuasinormalModes.jl is naturally slower to compute modes in this case.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIn order to minimize memory allocations, all functions that actually compute eigenvalues require a AIMCache object.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QGiven a certain a problem PN,T it initializes memory for 8 arrays of size getniter(p) + one(N) elements of type T. These arrays are used to store intermediate and final computation results.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QGiven a certain a problem PN,T it initializes memory for 8 arrays of size getniter(p) + one(N) elements of type T. These arrays are used to store intermediate and final computation results.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QTo compute eigenvalues, 3 functions are provided: computeDelta!: Computes the AIM \"quantization condition\" \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qmacro.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QcomputeEigenvalues: Computes a single, or a list of eigenvalues.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QeigenvaluesInGrid: Find all eigenvalues in a certain numerical grid.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIn a QuadraticEigenvalueProblem.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q`computeDelta!`: Returns a polynomial whose roots are the eigenvalues of the ODE.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QcomputeEigenvalues: Computes the complete list of eigenvalues given by the roots of the computed polynomial.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIn a NumericAIMProblem, 1.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q`computeDelta!`: Returns a value of the quantization condition at a given point in the complex plane.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QcomputeDelta!: Returns a polynomial whose roots are the eigenvalues of the ODE.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIn a NumericAIMProblem, computeDelta!: Returns a value of the quantization condition at a given point in the complex plane.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QcomputeEigenvalues: Computes a single eigenvalues from an initial trial frequency.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QcomputeEigenvalues: Computes a single eigenvalue from an initial trial frequency.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QeigenvaluesInGrid: Attempts to find eigenvalues using a grid of real or complex data points as initial trial frequencies passed to NLSolve.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QTo compute eigenvalues, 3 functions are provided: computeDelta!: Computes the AIM quantization condition \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIn a QuadraticEigenvalueProblem, computeDelta!: Returns a polynomial whose roots are the eigenvalues of the ODE.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QAdditionally, our implementation asks for an initial guess in NumericAIMProblems to find the roots of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, adding yet another degree of freedom to the method.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QFurthermore, because computeEigenvalues employs a Newton-like root finding method (provided by NLSolve) that is based on an initial guess for the root, choosing this guess “too far” from the correct solution might not converge to a root or it might be that the root is unstable and any small perturbation around an initial guess produces wildly different results.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QFurthermore, because computeEigenvalues employs a Newton-like root finding method (provided by NLSolve) that is based on an initial guess for the root, choosing this guess “too far” from the correct solution might not converge to a root, or it might be that the root is unstable and any small perturbation around an initial guess produces wildly different results.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QFrom here, we can take one of two different paths: If we have a QuadraticEigenvalueProblem, we will have a list of several eigenvalue candidates that are roots of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q polynomial but are not necessarily eigenvalues of the ODE.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIf we have a NumericAIMProblem, a call to computeEigenvalues can only produce a single eigenvalue based on an initial guess.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QAssuming that the NLSolve actually converges to a solution this mode is also under the peril of returning spurious results.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QHere, the wisdom of the QuadraticEigenvalueProblems remains: True results must be refined when the number of iterations increase (indicating numerical convergence).\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QA good value for \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q will make NLSolve converge to a root faster (with less iterations) than a bad one.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QA good value for \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q will make NLSolve converge to a root faster (with fewer iterations) than a bad one.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QFurthermore, in NumericAIMProblems the function `computeDelta!` is a point-wise function that returns the value of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q anywhere in the complex plane.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QFurthermore, in NumericAIMProblems the function computeDelta!\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qis a point-wise function that returns the value of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q anywhere in the complex plane.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QUsing this function, the user can employ a different root finding method than NLSolve.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QFinding initial guesses to supply to NumericAIMProblems can be difficult when solving a new physics problem.\\E$"}
{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\QFinding initial guesses to supply to NumericAIMProblems can be difficult when solving a new physics problem.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIf possible, one could first try and find eigenvalue candidates implementing the problem of interest as a QuadraticEigenvalueProblem or extending the code to work semi-analytically with other function types.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q9 10 [scale = 1.0]img/aim_qnm/arrays.svg Representation of AIM steps for an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q sized example.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q9 10 [scale = 0.50]img/aim_qnm/hierarchy.svg QuasinormalModes.jl type hierarchy.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIf we have a QuadraticEigenvalueProblem, we will have a list of several eigenvalue candidates that are roots of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q polynomial but are not necessarily eigenvalues of the ODE.\\E$"}
